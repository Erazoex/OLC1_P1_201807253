package analizadoresjs; 
import java_cup.runtime.*;
import proyecto1.*;

parser code 
{:
    
    
    public listaSimple list = new listaSimple();
    public String salida = "";
    public int linecounter = 0;
    public int cont_params = 0;
    public int lines = 0;
    public String getsalida(){
        return salida;
    }

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:} 

terminal String classes,obracket,cbracket,semicolon,colon,oparent,cparent,comma,osbracket,csbracket,equal;
terminal String var,let,tkconst,tkif,tkelse,tkfor,tkwhile,tkdo,tkswitch,tkcase,tkbreak,tkdefault;
terminal String equalsto,different,lessthan,greaterthan,loeto,goeto;
terminal String and,or,not,plus,minus,mult,slash,pot,modulus,charr;
terminal String console,require;
terminal String integerr,doublee,stringg,comment,multcomment,id;


non terminal String INICIO, CLASES, CLASE, CONTENIDO, METODO, PARAMETROS, INSTRUCCIONES, INSTRUCCION, LLAMADA, VARIABLEUNICA;
non terminal String VARIABLE, VALOR, CICLO, CONDICION, COMENTARIO;
non terminal String OPERADORRELACIONAL, OPERADORDOBLE, OPERADORLOGICO, OPERADORARITMETICO,CONDICIONAL, CONDICIONALES;
non terminal String ELSEIFS, ELSEIF, CASES, CASE, CONSOLELOG,PUNTOCOMA, TIPOIF,PASARPARAMS,TIPOVARIABLE;

precedence left plus, minus;
precedence left slash;
precedence left mult, pot;
precedence left modulus;

start with INICIO;


INICIO::= CLASES {: list.imprimirLista(); :}
        | COMENTARIO CLASES {: list.imprimirLista(); :};

CLASES::= CLASES CLASE 
        | CLASES COMENTARIO
        | CLASE;

CLASE::= classes id:var1 obracket CONTENIDO cbracket {: list.insertarNodo("clase",var1,lines,0);
                                                    lines = 0; :};

CONTENIDO::= CONTENIDO METODO
          | CONTENIDO VARIABLEUNICA
          | CONTENIDO COMENTARIO
          | METODO
          | VARIABLEUNICA
          | COMENTARIO
          | error;

PUNTOCOMA::= semicolon
          |;

COMENTARIO::= multcomment:var1 {: list.insertarNodo("comentario",var1,1,0); :}
             | comment:var1 {: list.insertarNodo("comentario",var1,1,0); :};

VARIABLEUNICA::= id equal VALOR semicolon
               | id equal VALOR;

METODO::= id:var1 oparent PARAMETROS cparent obracket INSTRUCCIONES cbracket {: list.insertarNodo("metodo",var1,linecounter,cont_params);
                                                                        cont_params = 0; lines += linecounter + 1; linecounter = 0; :}
        | id:var1  oparent cparent obracket INSTRUCCIONES cbracket {: list.insertarNodo("metodo",var1,linecounter,0); 
                                                                     lines+= linecounter +1; linecounter = 0; :};

PARAMETROS::= PARAMETROS comma id {: cont_params++; :}
            | id {: cont_params++; :};

INSTRUCCIONES::= INSTRUCCIONES INSTRUCCION {: linecounter++; :}
               | INSTRUCCION  {: linecounter++; :};

INSTRUCCION::= CONDICION
             | CICLO
             | VARIABLE
             | LLAMADA
             | CONSOLELOG
             | COMENTARIO
             | tkbreak;


VARIABLE::= TIPOVARIABLE id:var1 equal VALOR PUNTOCOMA {: list.insertarNodo("variable",var1,1,0); :}
          | id equal VALOR PUNTOCOMA;

TIPOVARIABLE::= var
              | let
              | tkconst;

CONDICION::= tkif oparent CONDICIONALES cparent obracket INSTRUCCIONES cbracket TIPOIF
           | tkswitch oparent VALOR cparent obracket CASES cbracket;

TIPOIF::= tkelse obracket INSTRUCCIONES cbracket
        | ELSEIFS
        |;

CASES::= CASES CASE
       | CASE;

CASE::= tkcase VALOR colon INSTRUCCIONES tkbreak semicolon
      | tkdefault colon INSTRUCCIONES;

ELSEIFS::= ELSEIFS ELSEIF
         | ELSEIF;

ELSEIF::= tkelse tkif oparent CONDICIONALES cparent obracket INSTRUCCIONES cbracket;

CICLO::= tkfor oparent VARIABLE id OPERADORRELACIONAL VALOR semicolon id OPERADORDOBLE cparent obracket INSTRUCCIONES cbracket
       | tkwhile oparent CONDICIONALES cparent obracket INSTRUCCIONES cbracket
       | tkdo obracket INSTRUCCIONES cbracket tkwhile CONDICIONALES semicolon;

CONDICIONALES::= CONDICIONALES OPERADORLOGICO CONDICIONAL
               | CONDICIONAL;

CONDICIONAL::= VALOR OPERADORRELACIONAL VALOR
            | not CONDICIONAL;

CONSOLELOG::= console oparent VALOR cparent PUNTOCOMA;

LLAMADA::= id oparent PASARPARAMS cparent semicolon
         | id oparent cparent semicolon;

PASARPARAMS::= PASARPARAMS comma VALOR
            | VALOR;

OPERADORDOBLE::= plus plus
               | minus minus;


OPERADORRELACIONAL::= equalsto
                     | different
                     | lessthan
                     | greaterthan
                     | loeto
                     | goeto;

VALOR::= VALOR OPERADORARITMETICO VALOR
       | minus VALOR
       | oparent VALOR cparent
       | integerr
       | doublee
       | id
       | charr
       | stringg
       | error;

OPERADORARITMETICO::= plus
                    | minus
                    | modulus
                    | pot
                    | mult
                    | slash;

OPERADORLOGICO::= and
                | or;



