
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadoresjs;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintacticojs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintacticojs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintacticojs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticojs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\004\007\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\036" +
    "\003\000\002\036\002\000\002\020\003\000\002\020\003" +
    "\000\002\013\006\000\002\013\005\000\002\006\011\000" +
    "\002\006\010\000\002\007\005\000\002\007\003\000\002" +
    "\010\004\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\021\004\000" +
    "\002\021\003\000\002\014\007\000\002\014\007\000\002" +
    "\014\007\000\002\014\006\000\002\017\012\000\002\017" +
    "\011\000\002\037\006\000\002\037\003\000\002\037\002" +
    "\000\002\033\004\000\002\033\003\000\002\034\010\000" +
    "\002\034\005\000\002\031\004\000\002\031\003\000\002" +
    "\032\012\000\002\016\023\000\002\016\022\000\002\016" +
    "\011\000\002\016\011\000\002\030\005\000\002\030\003" +
    "\000\002\027\005\000\002\027\004\000\002\035\007\000" +
    "\002\012\007\000\002\012\006\000\002\040\005\000\002" +
    "\040\003\000\002\024\004\000\002\024\004\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\022\006\000" +
    "\002\015\005\000\002\015\004\000\002\015\003\000\002" +
    "\015\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\020\004\010\017\020\020\007\021\004\060" +
    "\014\061\016\062\005\001\002\000\004\062\331\001\002" +
    "\000\004\016\153\001\002\000\012\002\000\004\010\060" +
    "\014\061\016\001\002\000\004\062\325\001\002\000\004" +
    "\062\064\001\002\000\004\002\063\001\002\000\014\004" +
    "\uffde\017\uffde\020\uffde\021\uffde\062\uffde\001\002\000\014" +
    "\004\010\017\020\020\007\021\004\062\005\001\002\000" +
    "\046\002\uffef\004\uffef\006\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\053\uffef\060\uffef\061\uffef\062\uffef\001\002" +
    "\000\012\002\ufffb\004\ufffb\060\ufffb\061\ufffb\001\002\000" +
    "\046\002\ufff0\004\ufff0\006\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\053\ufff0\060\ufff0\061\ufff0\062\ufff0\001\002" +
    "\000\004\004\010\001\002\000\004\062\021\001\002\000" +
    "\004\016\022\001\002\000\024\003\034\011\024\045\030" +
    "\052\035\054\027\055\026\056\032\057\031\062\025\001" +
    "\002\000\062\004\ufff1\006\ufff1\007\054\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\044\045\045\042\046\043\047\041" +
    "\050\044\051\040\053\ufff1\060\ufff1\061\ufff1\062\ufff1\001" +
    "\002\000\024\003\034\011\024\045\030\052\035\054\027" +
    "\055\026\056\032\057\031\062\025\001\002\000\110\004" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\012\uffb1\013\uffb1\017\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1\060\uffb1" +
    "\061\uffb1\062\uffb1\001\002\000\110\004\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\012\uffb3\013\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\053\uffb3\060\uffb3\061\uffb3\062\uffb3" +
    "\001\002\000\004\011\047\001\002\000\024\003\034\011" +
    "\024\045\030\052\035\054\027\055\026\056\032\057\031" +
    "\062\025\001\002\000\110\004\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\012\uffaf\013\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\053\uffaf\060\uffaf\061\uffaf\062\uffaf\001\002" +
    "\000\110\004\uffb2\006\uffb2\007\uffb2\010\uffb2\012\uffb2\013" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\053" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\001\002\000\110\004\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\012\uffb5\013\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\053\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\001\002\000\110\004\uffae\006\uffae\007\uffae" +
    "\010\uffae\012\uffae\013\uffae\017\uffae\020\uffae\021\uffae\022" +
    "\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae" +
    "\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\044\uffae\045\uffae\046\uffae\047\uffae" +
    "\050\uffae\051\uffae\053\uffae\060\uffae\061\uffae\062\uffae\001" +
    "\002\000\110\004\uffb0\006\uffb0\007\uffb0\010\uffb0\012\uffb0" +
    "\013\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\053\uffb0\060\uffb0\061\uffb0\062\uffb0\001\002\000\110\004" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6\045" +
    "\uffb6\046\043\047\041\050\044\051\040\053\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\001\002\000\024\003\034\011\024\045" +
    "\030\052\035\054\027\055\026\056\032\057\031\062\025" +
    "\001\002\000\024\003\uffab\011\uffab\045\uffab\052\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\062\uffab\001\002\000\024" +
    "\003\uffa8\011\uffa8\045\uffa8\052\uffa8\054\uffa8\055\uffa8\056" +
    "\uffa8\057\uffa8\062\uffa8\001\002\000\024\003\uffac\011\uffac" +
    "\045\uffac\052\uffac\054\uffac\055\uffac\056\uffac\057\uffac\062" +
    "\uffac\001\002\000\024\003\uffa9\011\uffa9\045\uffa9\052\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\057\uffa9\062\uffa9\001\002\000" +
    "\024\003\uffaa\011\uffaa\045\uffaa\052\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\057\uffaa\062\uffaa\001\002\000\024\003\uffad\011" +
    "\uffad\045\uffad\052\uffad\054\uffad\055\uffad\056\uffad\057\uffad" +
    "\062\uffad\001\002\000\110\004\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\012\uffb7\013\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\044\045\045\042\046\043\047\041\050" +
    "\044\051\040\053\uffb7\060\uffb7\061\uffb7\062\uffb7\001\002" +
    "\000\024\003\034\011\024\045\030\052\035\054\027\055" +
    "\026\056\032\057\031\062\025\001\002\000\020\012\051" +
    "\044\045\045\042\046\043\047\041\050\044\051\040\001" +
    "\002\000\110\004\uffb8\006\uffb8\007\uffb8\010\uffb8\012\uffb8" +
    "\013\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\053\uffb8\060\uffb8\061\uffb8\062\uffb8\001\002\000\020\012" +
    "\053\044\045\045\042\046\043\047\041\050\044\051\040" +
    "\001\002\000\110\004\uffb4\006\uffb4\007\uffb4\010\uffb4\012" +
    "\uffb4\013\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\053\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002\000\044" +
    "\004\ufff2\006\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\053\ufff2\060\ufff2\061\ufff2\062\ufff2\001\002\000\044\004" +
    "\uffdd\006\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\053" +
    "\uffdd\060\uffdd\061\uffdd\062\uffdd\001\002\000\012\002\uffff" +
    "\004\010\060\014\061\016\001\002\000\012\002\ufffc\004" +
    "\ufffc\060\ufffc\061\ufffc\001\002\000\012\002\ufffd\004\ufffd" +
    "\060\ufffd\061\ufffd\001\002\000\012\002\ufffe\004\010\060" +
    "\014\061\016\001\002\000\014\004\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\062\uffdf\001\002\000\004\002\001\001\002\000" +
    "\004\005\065\001\002\000\012\003\070\060\014\061\016" +
    "\062\073\001\002\000\012\006\ufff5\060\ufff5\061\ufff5\062" +
    "\ufff5\001\002\000\012\006\ufff6\060\ufff6\061\ufff6\062\ufff6" +
    "\001\002\000\012\006\ufff3\060\ufff3\061\ufff3\062\ufff3\001" +
    "\002\000\012\006\ufff4\060\ufff4\061\ufff4\062\ufff4\001\002" +
    "\000\012\006\323\060\014\061\016\062\073\001\002\000" +
    "\006\011\074\016\075\001\002\000\006\012\101\062\102" +
    "\001\002\000\024\003\034\011\024\045\030\052\035\054" +
    "\027\055\026\056\032\057\031\062\025\001\002\000\030" +
    "\006\uffed\007\077\044\045\045\042\046\043\047\041\050" +
    "\044\051\040\060\uffed\061\uffed\062\uffed\001\002\000\012" +
    "\006\uffee\060\uffee\061\uffee\062\uffee\001\002\000\006\012" +
    "\314\013\313\001\002\000\004\005\103\001\002\000\006" +
    "\012\uffe9\013\uffe9\001\002\000\034\017\020\020\007\021" +
    "\004\022\104\024\113\025\111\026\110\027\122\031\117" +
    "\053\120\060\014\061\016\062\116\001\002\000\004\011" +
    "\265\001\002\000\042\006\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\053\uffe3\060\uffe3\061\uffe3\062\uffe3\001\002" +
    "\000\042\006\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\053\uffe7\060\uffe7\061\uffe7\062\uffe7\001\002\000\042\006" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\053\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\001\002\000\004\005\257\001\002" +
    "\000\004\011\237\001\002\000\036\006\236\017\020\020" +
    "\007\021\004\022\104\024\113\025\111\026\110\027\122" +
    "\031\117\053\120\060\014\061\016\062\116\001\002\000" +
    "\004\011\166\001\002\000\042\006\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\053\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\001\002\000\042\006\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\053\uffe5\060\uffe5\061\uffe5\062\uffe5\001\002\000" +
    "\006\011\152\016\153\001\002\000\042\006\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\053\uffe0\060\uffe0\061\uffe0" +
    "\062\uffe0\001\002\000\004\011\146\001\002\000\042\006" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\053\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\001\002\000\004\011\124\001\002" +
    "\000\042\006\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\053\uffe6\060\uffe6\061\uffe6\062\uffe6\001\002\000\024\003" +
    "\034\011\024\045\030\052\035\054\027\055\026\056\032" +
    "\057\031\062\025\001\002\000\020\012\126\044\045\045" +
    "\042\046\043\047\041\050\044\051\040\001\002\000\004" +
    "\005\127\001\002\000\006\030\130\032\131\001\002\000" +
    "\024\003\034\011\024\045\030\052\035\054\027\055\026" +
    "\056\032\057\031\062\025\001\002\000\004\010\136\001" +
    "\002\000\010\006\134\030\130\032\131\001\002\000\010" +
    "\006\uffd3\030\uffd3\032\uffd3\001\002\000\042\006\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\053\uffd8\060\uffd8\061" +
    "\uffd8\062\uffd8\001\002\000\010\006\uffd4\030\uffd4\032\uffd4" +
    "\001\002\000\034\017\020\020\007\021\004\022\104\024" +
    "\113\025\111\026\110\027\122\031\117\053\120\060\014" +
    "\061\016\062\116\001\002\000\042\006\uffd1\017\020\020" +
    "\007\021\004\022\104\024\113\025\111\026\110\027\122" +
    "\030\uffd1\031\117\032\uffd1\053\120\060\014\061\016\062" +
    "\116\001\002\000\042\006\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\053\uffe8\060\uffe8\061\uffe8\062\uffe8\001\002" +
    "\000\020\010\142\044\045\045\042\046\043\047\041\050" +
    "\044\051\040\001\002\000\034\017\020\020\007\021\004" +
    "\022\104\024\113\025\111\026\110\027\122\031\117\053" +
    "\120\060\014\061\016\062\116\001\002\000\034\017\020" +
    "\020\007\021\004\022\104\024\113\025\111\026\110\027" +
    "\122\031\144\053\120\060\014\061\016\062\116\001\002" +
    "\000\036\007\145\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\031\uffe0\053\uffe0\060\uffe0" +
    "\061\uffe0\062\uffe0\001\002\000\010\006\uffd2\030\uffd2\032" +
    "\uffd2\001\002\000\024\003\034\011\024\045\030\052\035" +
    "\054\027\055\026\056\032\057\031\062\025\001\002\000" +
    "\020\012\150\044\045\045\042\046\043\047\041\050\044" +
    "\051\040\001\002\000\044\006\ufff1\007\054\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\031\ufff1\032\ufff1\053\ufff1\060\ufff1\061\ufff1\062" +
    "\ufff1\001\002\000\042\006\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\053\uffc5\060\uffc5\061\uffc5\062\uffc5\001\002" +
    "\000\026\003\034\011\024\012\157\045\030\052\035\054" +
    "\027\055\026\056\032\057\031\062\025\001\002\000\024" +
    "\003\034\011\024\045\030\052\035\054\027\055\026\056" +
    "\032\057\031\062\025\001\002\000\062\004\ufff1\006\ufff1" +
    "\007\054\017\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\044\045" +
    "\045\042\046\043\047\041\050\044\051\040\053\ufff1\060" +
    "\ufff1\061\ufff1\062\ufff1\001\002\000\044\004\uffda\006\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\053\uffda\060\uffda" +
    "\061\uffda\062\uffda\001\002\000\022\012\uffc1\013\uffc1\044" +
    "\045\045\042\046\043\047\041\050\044\051\040\001\002" +
    "\000\004\007\165\001\002\000\006\012\162\013\161\001" +
    "\002\000\024\003\034\011\024\045\030\052\035\054\027" +
    "\055\026\056\032\057\031\062\025\001\002\000\004\007" +
    "\163\001\002\000\042\006\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\053\uffc4\060\uffc4\061\uffc4\062\uffc4\001\002" +
    "\000\022\012\uffc2\013\uffc2\044\045\045\042\046\043\047" +
    "\041\050\044\051\040\001\002\000\042\006\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\053\uffc3\060\uffc3\061\uffc3" +
    "\062\uffc3\001\002\000\006\020\167\062\170\001\002\000" +
    "\004\062\220\001\002\000\004\016\171\001\002\000\024" +
    "\003\034\011\024\045\030\052\035\054\027\055\026\056" +
    "\032\057\031\062\025\001\002\000\020\007\173\044\045" +
    "\045\042\046\043\047\041\050\044\051\040\001\002\000" +
    "\004\062\174\001\002\000\016\033\200\034\203\035\177" +
    "\036\176\037\201\040\175\001\002\000\024\003\uffb9\011" +
    "\uffb9\045\uffb9\052\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9" +
    "\062\uffb9\001\002\000\024\003\uffbb\011\uffbb\045\uffbb\052" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\062\uffbb\001\002" +
    "\000\024\003\uffbc\011\uffbc\045\uffbc\052\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\062\uffbc\001\002\000\024\003\uffbe" +
    "\011\uffbe\045\uffbe\052\uffbe\054\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\062\uffbe\001\002\000\024\003\uffba\011\uffba\045\uffba" +
    "\052\uffba\054\uffba\055\uffba\056\uffba\057\uffba\062\uffba\001" +
    "\002\000\024\003\034\011\024\045\030\052\035\054\027" +
    "\055\026\056\032\057\031\062\025\001\002\000\024\003" +
    "\uffbd\011\uffbd\045\uffbd\052\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\062\uffbd\001\002\000\020\007\205\044\045\045" +
    "\042\046\043\047\041\050\044\051\040\001\002\000\004" +
    "\062\206\001\002\000\006\044\211\045\207\001\002\000" +
    "\004\045\217\001\002\000\004\012\213\001\002\000\004" +
    "\044\212\001\002\000\004\012\uffc0\001\002\000\004\005" +
    "\214\001\002\000\034\017\020\020\007\021\004\022\104" +
    "\024\113\025\111\026\110\027\122\031\117\053\120\060" +
    "\014\061\016\062\116\001\002\000\036\006\216\017\020" +
    "\020\007\021\004\022\104\024\113\025\111\026\110\027" +
    "\122\031\117\053\120\060\014\061\016\062\116\001\002" +
    "\000\042\006\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\053\uffcc\060\uffcc\061\uffcc\062\uffcc\001\002\000\004\012" +
    "\uffbf\001\002\000\004\016\221\001\002\000\024\003\034" +
    "\011\024\045\030\052\035\054\027\055\026\056\032\057" +
    "\031\062\025\001\002\000\020\007\223\044\045\045\042" +
    "\046\043\047\041\050\044\051\040\001\002\000\004\062" +
    "\224\001\002\000\016\033\200\034\203\035\177\036\176" +
    "\037\201\040\175\001\002\000\024\003\034\011\024\045" +
    "\030\052\035\054\027\055\026\056\032\057\031\062\025" +
    "\001\002\000\020\007\227\044\045\045\042\046\043\047" +
    "\041\050\044\051\040\001\002\000\004\062\230\001\002" +
    "\000\006\044\211\045\207\001\002\000\004\012\232\001" +
    "\002\000\004\005\233\001\002\000\034\017\020\020\007" +
    "\021\004\022\104\024\113\025\111\026\110\027\122\031" +
    "\117\053\120\060\014\061\016\062\116\001\002\000\036" +
    "\006\235\017\020\020\007\021\004\022\104\024\113\025" +
    "\111\026\110\027\122\031\117\053\120\060\014\061\016" +
    "\062\116\001\002\000\042\006\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\053\uffcd\060\uffcd\061\uffcd\062\uffcd\001" +
    "\002\000\012\006\uffeb\060\uffeb\061\uffeb\062\uffeb\001\002" +
    "\000\026\003\034\011\024\043\241\045\030\052\035\054" +
    "\027\055\026\056\032\057\031\062\025\001\002\000\032" +
    "\033\200\034\203\035\177\036\176\037\201\040\175\044" +
    "\045\045\042\046\043\047\041\050\044\051\040\001\002" +
    "\000\026\003\034\011\024\043\241\045\030\052\035\054" +
    "\027\055\026\056\032\057\031\062\025\001\002\000\012" +
    "\007\uffc8\012\uffc8\041\uffc8\042\uffc8\001\002\000\010\012" +
    "\247\041\245\042\246\001\002\000\026\003\034\011\024" +
    "\043\241\045\030\052\035\054\027\055\026\056\032\057" +
    "\031\062\025\001\002\000\026\003\uffa7\011\uffa7\043\uffa7" +
    "\045\uffa7\052\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\062" +
    "\uffa7\001\002\000\026\003\uffa6\011\uffa6\043\uffa6\045\uffa6" +
    "\052\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\062\uffa6\001" +
    "\002\000\004\005\250\001\002\000\034\017\020\020\007" +
    "\021\004\022\104\024\113\025\111\026\110\027\122\031" +
    "\117\053\120\060\014\061\016\062\116\001\002\000\036" +
    "\006\252\017\020\020\007\021\004\022\104\024\113\025" +
    "\111\026\110\027\122\031\117\053\120\060\014\061\016" +
    "\062\116\001\002\000\042\006\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\053\uffcb\060\uffcb\061\uffcb\062\uffcb\001" +
    "\002\000\012\007\uffc9\012\uffc9\041\uffc9\042\uffc9\001\002" +
    "\000\012\007\uffc6\012\uffc6\041\uffc6\042\uffc6\001\002\000" +
    "\024\003\034\011\024\045\030\052\035\054\027\055\026" +
    "\056\032\057\031\062\025\001\002\000\026\007\uffc7\012" +
    "\uffc7\041\uffc7\042\uffc7\044\045\045\042\046\043\047\041" +
    "\050\044\051\040\001\002\000\034\017\020\020\007\021" +
    "\004\022\104\024\113\025\111\026\110\027\122\031\117" +
    "\053\120\060\014\061\016\062\116\001\002\000\036\006" +
    "\261\017\020\020\007\021\004\022\104\024\113\025\111" +
    "\026\110\027\122\031\117\053\120\060\014\061\016\062" +
    "\116\001\002\000\004\025\262\001\002\000\026\003\034" +
    "\011\024\043\241\045\030\052\035\054\027\055\026\056" +
    "\032\057\031\062\025\001\002\000\010\007\264\041\245" +
    "\042\246\001\002\000\042\006\uffca\017\uffca\020\uffca\021" +
    "\uffca\022\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\053\uffca\060\uffca\061\uffca\062\uffca\001" +
    "\002\000\026\003\034\011\024\043\241\045\030\052\035" +
    "\054\027\055\026\056\032\057\031\062\025\001\002\000" +
    "\010\012\267\041\245\042\246\001\002\000\004\005\270" +
    "\001\002\000\034\017\020\020\007\021\004\022\104\024" +
    "\113\025\111\026\110\027\122\031\117\053\120\060\014" +
    "\061\016\062\116\001\002\000\036\006\272\017\020\020" +
    "\007\021\004\022\104\024\113\025\111\026\110\027\122" +
    "\031\117\053\120\060\014\061\016\062\116\001\002\000" +
    "\044\006\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\275" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\053\uffd5\060\uffd5\061\uffd5\062\uffd5\001\002\000\044" +
    "\006\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\053\uffcf\060\uffcf\061\uffcf\062\uffcf\001\002\000\042\006" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\053\uffd9\060" +
    "\uffd9\061\uffd9\062\uffd9\001\002\000\006\005\310\022\301" +
    "\001\002\000\044\006\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\300\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\053\uffd6\060\uffd6\061\uffd6\062\uffd6\001" +
    "\002\000\044\006\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\053\uffd0\060\uffd0\061\uffd0\062\uffd0\001\002" +
    "\000\004\022\301\001\002\000\004\011\302\001\002\000" +
    "\026\003\034\011\024\043\241\045\030\052\035\054\027" +
    "\055\026\056\032\057\031\062\025\001\002\000\010\012" +
    "\304\041\245\042\246\001\002\000\004\005\305\001\002" +
    "\000\034\017\020\020\007\021\004\022\104\024\113\025" +
    "\111\026\110\027\122\031\117\053\120\060\014\061\016" +
    "\062\116\001\002\000\036\006\307\017\020\020\007\021" +
    "\004\022\104\024\113\025\111\026\110\027\122\031\117" +
    "\053\120\060\014\061\016\062\116\001\002\000\044\006" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\053" +
    "\uffce\060\uffce\061\uffce\062\uffce\001\002\000\034\017\020" +
    "\020\007\021\004\022\104\024\113\025\111\026\110\027" +
    "\122\031\117\053\120\060\014\061\016\062\116\001\002" +
    "\000\036\006\312\017\020\020\007\021\004\022\104\024" +
    "\113\025\111\026\110\027\122\031\117\053\120\060\014" +
    "\061\016\062\116\001\002\000\042\006\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\053\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\001\002\000\004\062\320\001\002\000\004\005\315" +
    "\001\002\000\034\017\020\020\007\021\004\022\104\024" +
    "\113\025\111\026\110\027\122\031\117\053\120\060\014" +
    "\061\016\062\116\001\002\000\036\006\317\017\020\020" +
    "\007\021\004\022\104\024\113\025\111\026\110\027\122" +
    "\031\117\053\120\060\014\061\016\062\116\001\002\000" +
    "\012\006\uffec\060\uffec\061\uffec\062\uffec\001\002\000\006" +
    "\012\uffea\013\uffea\001\002\000\012\006\ufff8\060\ufff8\061" +
    "\ufff8\062\ufff8\001\002\000\012\006\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\001\002\000\012\002\ufffa\004\ufffa\060\ufffa\061" +
    "\ufffa\001\002\000\012\006\ufff7\060\ufff7\061\ufff7\062\ufff7" +
    "\001\002\000\004\016\326\001\002\000\024\003\034\011" +
    "\024\045\030\052\035\054\027\055\026\056\032\057\031" +
    "\062\025\001\002\000\062\004\ufff1\006\ufff1\007\054\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\044\045\045\042\046" +
    "\043\047\041\050\044\051\040\053\ufff1\060\ufff1\061\ufff1" +
    "\062\ufff1\001\002\000\044\004\uffdc\006\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\053\uffdc\060\uffdc\061\uffdc\062" +
    "\uffdc\001\002\000\004\016\332\001\002\000\024\003\034" +
    "\011\024\045\030\052\035\054\027\055\026\056\032\057" +
    "\031\062\025\001\002\000\062\004\ufff1\006\ufff1\007\054" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\044\045\045\042" +
    "\046\043\047\041\050\044\051\040\053\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\001\002\000\044\004\uffdb\006\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\053\uffdb\060\uffdb\061\uffdb" +
    "\062\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\016\002\010\003\005\004\014\014\011\020" +
    "\016\021\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\057\020\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\060\004\014\014\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\055\004\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\022\022\032\001\001\000\006\026\036\036\054\001\001" +
    "\000\006\015\051\022\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\035\022\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\036" +
    "\001\001\000\006\015\045\022\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\036\001" +
    "\001\000\006\015\047\022\032\001\001\000\004\026\036" +
    "\001\001\000\002\001\001\000\004\026\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\057\020\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\057\020\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\071\006" +
    "\066\013\065\020\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\321\013\320\020\323\001\001\000\002\001\001\000\004" +
    "\007\077\001\001\000\006\015\075\022\032\001\001\000" +
    "\004\026\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\111\011" +
    "\105\012\104\014\113\016\114\017\122\020\120\035\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\137\012\104\014\113\016\114\017\122\020" +
    "\120\035\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\124\022\032\001\001\000\004\026" +
    "\036\001\001\000\002\001\001\000\006\033\131\034\132" +
    "\001\001\000\006\015\140\022\032\001\001\000\002\001" +
    "\001\000\004\034\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\010\136\011\105\012" +
    "\104\014\113\016\114\017\122\020\120\035\106\001\001" +
    "\000\020\011\137\012\104\014\113\016\114\017\122\020" +
    "\120\035\106\001\001\000\002\001\001\000\004\026\036" +
    "\001\001\000\022\010\142\011\105\012\104\014\113\016" +
    "\114\017\122\020\120\035\106\001\001\000\020\011\137" +
    "\012\104\014\113\016\114\017\122\020\120\035\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\146" +
    "\022\032\001\001\000\004\026\036\001\001\000\004\036" +
    "\150\001\001\000\002\001\001\000\010\015\155\022\032" +
    "\040\157\001\001\000\006\015\153\022\032\001\001\000" +
    "\006\026\036\036\154\001\001\000\002\001\001\000\004" +
    "\026\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\163\022\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\171\022\032\001\001\000\004\026\036\001\001\000" +
    "\002\001\001\000\004\023\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\203\022\032\001\001\000\002" +
    "\001\001\000\004\026\036\001\001\000\002\001\001\000" +
    "\004\024\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\214\011\105\012\104\014\113\016\114\017\122" +
    "\020\120\035\106\001\001\000\020\011\137\012\104\014" +
    "\113\016\114\017\122\020\120\035\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\221\022\032\001\001\000\004\026\036\001\001\000\002" +
    "\001\001\000\004\023\224\001\001\000\006\015\225\022" +
    "\032\001\001\000\004\026\036\001\001\000\002\001\001" +
    "\000\004\024\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\233\011\105\012\104\014\113\016\114" +
    "\017\122\020\120\035\106\001\001\000\020\011\137\012" +
    "\104\014\113\016\114\017\122\020\120\035\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\237\022" +
    "\032\027\241\030\242\001\001\000\006\023\254\026\036" +
    "\001\001\000\010\015\237\022\032\027\253\001\001\000" +
    "\002\001\001\000\004\025\243\001\001\000\010\015\237" +
    "\022\032\027\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\250\011\105\012\104" +
    "\014\113\016\114\017\122\020\120\035\106\001\001\000" +
    "\020\011\137\012\104\014\113\016\114\017\122\020\120" +
    "\035\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\255\022\032\001\001\000\004" +
    "\026\036\001\001\000\022\010\257\011\105\012\104\014" +
    "\113\016\114\017\122\020\120\035\106\001\001\000\020" +
    "\011\137\012\104\014\113\016\114\017\122\020\120\035" +
    "\106\001\001\000\002\001\001\000\012\015\237\022\032" +
    "\027\241\030\262\001\001\000\004\025\243\001\001\000" +
    "\002\001\001\000\012\015\237\022\032\027\241\030\265" +
    "\001\001\000\004\025\243\001\001\000\002\001\001\000" +
    "\022\010\270\011\105\012\104\014\113\016\114\017\122" +
    "\020\120\035\106\001\001\000\020\011\137\012\104\014" +
    "\113\016\114\017\122\020\120\035\106\001\001\000\010" +
    "\031\275\032\272\037\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\237\022\032\027\241\030\302\001\001\000\004" +
    "\025\243\001\001\000\002\001\001\000\022\010\305\011" +
    "\105\012\104\014\113\016\114\017\122\020\120\035\106" +
    "\001\001\000\020\011\137\012\104\014\113\016\114\017" +
    "\122\020\120\035\106\001\001\000\002\001\001\000\022" +
    "\010\310\011\105\012\104\014\113\016\114\017\122\020" +
    "\120\035\106\001\001\000\020\011\137\012\104\014\113" +
    "\016\114\017\122\020\120\035\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\315" +
    "\011\105\012\104\014\113\016\114\017\122\020\120\035" +
    "\106\001\001\000\020\011\137\012\104\014\113\016\114" +
    "\017\122\020\120\035\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\326\022\032\001\001\000\006\026\036\036\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\332\022" +
    "\032\001\001\000\006\026\036\036\333\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticojs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticojs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticojs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    

    public String salida = "";

    public String getsalida(){
        return salida;
    }

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintacticojs$actions {
  private final sintacticojs parser;

  /** Constructor */
  CUP$sintacticojs$actions(sintacticojs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintacticojs$do_action_part00000000(
    int                        CUP$sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$sintacticojs$parser,
    java.util.Stack            CUP$sintacticojs$stack,
    int                        CUP$sintacticojs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticojs$result;

      /* select the action based on the action number */
      switch (CUP$sintacticojs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)).value;
		RESULT = start_val;
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticojs$parser.done_parsing();
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CLASES 
            {
              String RESULT =null;
		 System.out.println("produccion de inicio terminada"); 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= COMENTARIO CLASES 
            {
              String RESULT =null;
		 System.out.println("produccion de inicio terminada con comentario al principio"); 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= VARIABLES CLASES 
            {
              String RESULT =null;
		 System.out.println("produccion de inicio terminada con comentario al principio"); 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASES ::= CLASES CLASE 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CLASES",1, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASES ::= CLASES COMENTARIO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CLASES",1, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CLASES ::= CLASE 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CLASES",1, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CLASE ::= classes id obracket CONTENIDO cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CLASE",2, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO ::= CONTENIDO METODO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= CONTENIDO VARIABLEUNICA 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDO ::= CONTENIDO COMENTARIO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO ::= METODO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO ::= VARIABLEUNICA 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO ::= COMENTARIO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO ::= error 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PUNTOCOMA ::= semicolon 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("PUNTOCOMA",28, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PUNTOCOMA ::= 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("PUNTOCOMA",28, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMENTARIO ::= multcomment 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("COMENTARIO",14, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COMENTARIO ::= comment 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("COMENTARIO",14, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIABLEUNICA ::= id equal VALOR semicolon 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIABLEUNICA",9, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARIABLEUNICA ::= id equal VALOR 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIABLEUNICA",9, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // METODO ::= id oparent PARAMETROS cparent obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("METODO",4, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // METODO ::= id oparent cparent obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("METODO",4, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS ::= PARAMETROS comma id 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",5, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETROS ::= id 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",5, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCIONES ::= INSTRUCCION 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= CONDICION 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= CICLO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= VARIABLE 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= LLAMADA 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= CONSOLELOG 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= COMENTARIO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCCION ::= tkbreak 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VARIABLES ::= VARIABLES VARIABLE 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARIABLES ::= VARIABLE 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARIABLE ::= var id equal VALOR PUNTOCOMA 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIABLE",10, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARIABLE ::= let id equal VALOR PUNTOCOMA 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIABLE",10, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VARIABLE ::= tkconst id equal VALOR PUNTOCOMA 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIABLE",10, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARIABLE ::= id equal VALOR PUNTOCOMA 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIABLE",10, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDICION ::= tkif oparent CONDICIONALES cparent obracket INSTRUCCIONES cbracket TIPOIF 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONDICION ::= tkswitch oparent VALOR cparent obracket CASES cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOIF ::= tkelse obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("TIPOIF",29, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOIF ::= ELSEIFS 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("TIPOIF",29, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOIF ::= 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("TIPOIF",29, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CASES",25, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CASES",25, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASE ::= tkcase VALOR colon INSTRUCCIONES tkbreak semicolon 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CASE",26, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CASE ::= tkdefault colon INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CASE",26, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSEIFS ::= ELSEIFS ELSEIF 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("ELSEIFS",23, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSEIFS ::= ELSEIF 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("ELSEIFS",23, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELSEIF ::= tkelse tkif oparent CONDICIONALES cparent obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("ELSEIF",24, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CICLO ::= tkfor oparent let id equal VALOR semicolon id OPERADORRELACIONAL VALOR semicolon id OPERADORDOBLE cparent obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CICLO",12, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-16)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CICLO ::= tkfor oparent id equal VALOR semicolon id OPERADORRELACIONAL VALOR semicolon id OPERADORDOBLE cparent obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CICLO",12, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-15)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CICLO ::= tkwhile oparent CONDICIONALES cparent obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CICLO",12, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CICLO ::= tkdo obracket INSTRUCCIONES cbracket tkwhile CONDICIONALES semicolon 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CICLO",12, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICIONALES ::= CONDICIONALES OPERADORLOGICO CONDICIONAL 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",22, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICIONALES ::= CONDICIONAL 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",22, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICIONAL ::= VALOR OPERADORRELACIONAL VALOR 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",21, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICIONAL ::= not CONDICIONAL 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",21, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONSOLELOG ::= console oparent VALOR cparent PUNTOCOMA 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONSOLELOG",27, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LLAMADA ::= id oparent PASARPARAMS cparent semicolon 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("LLAMADA",8, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LLAMADA ::= id oparent cparent semicolon 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("LLAMADA",8, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PASARPARAMS ::= PASARPARAMS comma VALOR 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("PASARPARAMS",30, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PASARPARAMS ::= VALOR 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("PASARPARAMS",30, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADORDOBLE ::= plus plus 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORDOBLE",18, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADORDOBLE ::= minus minus 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORDOBLE",18, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERADORRELACIONAL ::= equalsto 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",17, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADORRELACIONAL ::= different 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",17, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADORRELACIONAL ::= lessthan 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",17, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERADORRELACIONAL ::= greaterthan 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",17, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERADORRELACIONAL ::= loeto 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",17, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERADORRELACIONAL ::= goeto 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",17, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // REQUIRE ::= require oparent VALOR cparent 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("REQUIRE",16, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALOR ::= VALOR OPERADORARITMETICO VALOR 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALOR ::= minus VALOR 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALOR ::= REQUIRE 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALOR ::= oparent VALOR cparent 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALOR ::= integerr 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALOR ::= doublee 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALOR ::= id 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALOR ::= charr 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALOR ::= stringg 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALOR ::= error 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADORARITMETICO ::= plus 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORARITMETICO",20, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADORARITMETICO ::= minus 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORARITMETICO",20, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADORARITMETICO ::= modulus 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORARITMETICO",20, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADORARITMETICO ::= pot 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORARITMETICO",20, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADORARITMETICO ::= mult 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORARITMETICO",20, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADORARITMETICO ::= slash 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORARITMETICO",20, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERADORLOGICO ::= and 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORLOGICO",19, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERADORLOGICO ::= or 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORLOGICO",19, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintacticojs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintacticojs$do_action(
    int                        CUP$sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$sintacticojs$parser,
    java.util.Stack            CUP$sintacticojs$stack,
    int                        CUP$sintacticojs$top)
    throws java.lang.Exception
    {
              return CUP$sintacticojs$do_action_part00000000(
                               CUP$sintacticojs$act_num,
                               CUP$sintacticojs$parser,
                               CUP$sintacticojs$stack,
                               CUP$sintacticojs$top);
    }
}

}
