
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadoresjs;

import java_cup.runtime.*;
import proyecto1.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintacticojs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintacticojs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintacticojs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticojs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\004\007\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\034\003\000\002\034" +
    "\002\000\002\020\003\000\002\020\003\000\002\013\006" +
    "\000\002\013\005\000\002\006\011\000\002\006\010\000" +
    "\002\007\005\000\002\007\003\000\002\010\004\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\014\007\000\002\014\006\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\017\012\000\002\017\011\000\002\035\006\000\002\035" +
    "\003\000\002\035\002\000\002\031\004\000\002\031\003" +
    "\000\002\032\010\000\002\032\005\000\002\027\004\000" +
    "\002\027\003\000\002\030\012\000\002\016\017\000\002" +
    "\016\011\000\002\016\011\000\002\026\005\000\002\026" +
    "\003\000\002\025\005\000\002\025\004\000\002\033\007" +
    "\000\002\012\007\000\002\012\006\000\002\036\005\000" +
    "\002\036\003\000\002\022\004\000\002\022\004\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\015\005" +
    "\000\002\015\004\000\002\015\005\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\010\004\004\060\012\061\010\001\002\000" +
    "\004\062\017\001\002\000\012\002\000\004\004\060\012" +
    "\061\010\001\002\000\004\004\004\001\002\000\004\002" +
    "\013\001\002\000\046\002\ufff1\004\ufff1\006\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\053\ufff1\060\ufff1\061\ufff1" +
    "\062\ufff1\001\002\000\012\002\ufffc\004\ufffc\060\ufffc\061" +
    "\ufffc\001\002\000\046\002\ufff0\004\ufff0\006\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\053\ufff0\060\ufff0\061\ufff0" +
    "\062\ufff0\001\002\000\004\002\001\001\002\000\012\002" +
    "\uffff\004\004\060\012\061\010\001\002\000\012\002\ufffd" +
    "\004\ufffd\060\ufffd\061\ufffd\001\002\000\012\002\ufffe\004" +
    "\ufffe\060\ufffe\061\ufffe\001\002\000\004\005\020\001\002" +
    "\000\012\003\023\060\012\061\010\062\026\001\002\000" +
    "\012\006\ufff6\060\ufff6\061\ufff6\062\ufff6\001\002\000\012" +
    "\006\ufff7\060\ufff7\061\ufff7\062\ufff7\001\002\000\012\006" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\001\002\000\012\006\ufff5" +
    "\060\ufff5\061\ufff5\062\ufff5\001\002\000\012\006\271\060" +
    "\012\061\010\062\026\001\002\000\006\011\027\016\030" +
    "\001\002\000\006\012\060\062\057\001\002\000\022\003" +
    "\040\011\032\045\035\052\041\055\034\056\037\057\036" +
    "\062\033\001\002\000\030\006\uffee\007\055\044\051\045" +
    "\046\046\047\047\045\050\050\051\043\060\uffee\061\uffee" +
    "\062\uffee\001\002\000\022\003\040\011\032\045\035\052" +
    "\041\055\034\056\037\057\036\062\033\001\002\000\106" +
    "\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6\060\uffb6\061" +
    "\uffb6\062\uffb6\001\002\000\106\006\uffb8\007\uffb8\010\uffb8" +
    "\012\uffb8\013\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\053\uffb8\060\uffb8\061\uffb8\062\uffb8\001\002\000" +
    "\022\003\040\011\032\045\035\052\041\055\034\056\037" +
    "\057\036\062\033\001\002\000\106\006\uffb4\007\uffb4\010" +
    "\uffb4\012\uffb4\013\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\053\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002" +
    "\000\106\006\uffb7\007\uffb7\010\uffb7\012\uffb7\013\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\053\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\001\002\000\106\006\uffb3\007\uffb3" +
    "\010\uffb3\012\uffb3\013\uffb3\017\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\051\uffb3\053\uffb3\060\uffb3\061\uffb3\062\uffb3\001" +
    "\002\000\106\006\uffb5\007\uffb5\010\uffb5\012\uffb5\013\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\053\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\001\002\000\106\006\uffba\007" +
    "\uffba\010\uffba\012\uffba\013\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\044\uffba\045\uffba\046\047\047" +
    "\045\050\050\051\043\053\uffba\060\uffba\061\uffba\062\uffba" +
    "\001\002\000\022\003\uffb0\011\uffb0\045\uffb0\052\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\062\uffb0\001\002\000\022\003\040" +
    "\011\032\045\035\052\041\055\034\056\037\057\036\062" +
    "\033\001\002\000\022\003\uffad\011\uffad\045\uffad\052\uffad" +
    "\055\uffad\056\uffad\057\uffad\062\uffad\001\002\000\022\003" +
    "\uffb1\011\uffb1\045\uffb1\052\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\062\uffb1\001\002\000\022\003\uffae\011\uffae\045\uffae\052" +
    "\uffae\055\uffae\056\uffae\057\uffae\062\uffae\001\002\000\022" +
    "\003\uffaf\011\uffaf\045\uffaf\052\uffaf\055\uffaf\056\uffaf\057" +
    "\uffaf\062\uffaf\001\002\000\022\003\uffb2\011\uffb2\045\uffb2" +
    "\052\uffb2\055\uffb2\056\uffb2\057\uffb2\062\uffb2\001\002\000" +
    "\106\006\uffbb\007\uffbb\010\uffbb\012\uffbb\013\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\044\051\045" +
    "\046\046\047\047\045\050\050\051\043\053\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\001\002\000\020\012\054\044\051\045" +
    "\046\046\047\047\045\050\050\051\043\001\002\000\106" +
    "\006\uffb9\007\uffb9\010\uffb9\012\uffb9\013\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\001\002\000\012\006\uffef\060\uffef\061\uffef" +
    "\062\uffef\001\002\000\006\012\262\013\261\001\002\000" +
    "\006\012\uffea\013\uffea\001\002\000\004\005\061\001\002" +
    "\000\034\017\102\020\076\021\101\022\062\024\071\025" +
    "\067\026\066\027\104\031\077\053\100\060\012\061\010" +
    "\062\075\001\002\000\004\011\233\001\002\000\042\006" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\053\uffe4\060" +
    "\uffe4\061\uffe4\062\uffe4\001\002\000\042\006\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\053\uffe8\060\uffe8\061\uffe8" +
    "\062\uffe8\001\002\000\042\006\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\053\uffe3\060\uffe3\061\uffe3\062\uffe3\001" +
    "\002\000\004\005\225\001\002\000\004\011\205\001\002" +
    "\000\036\006\204\017\102\020\076\021\101\022\062\024" +
    "\071\025\067\026\066\027\104\031\077\053\100\060\012" +
    "\061\010\062\075\001\002\000\004\011\155\001\002\000" +
    "\042\006\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\053" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\001\002\000\004\062\151" +
    "\001\002\000\042\006\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\053\uffe6\060\uffe6\061\uffe6\062\uffe6\001\002\000" +
    "\006\011\135\016\136\001\002\000\004\062\uffdd\001\002" +
    "\000\042\006\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\053\uffe1\060\uffe1\061\uffe1\062\uffe1\001\002\000\004\011" +
    "\130\001\002\000\004\062\uffdc\001\002\000\004\062\uffde" +
    "\001\002\000\042\006\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\053\uffe2\060\uffe2\061\uffe2\062\uffe2\001\002\000" +
    "\004\011\106\001\002\000\042\006\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\053\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\001\002\000\022\003\040\011\032\045\035\052\041\055" +
    "\034\056\037\057\036\062\033\001\002\000\020\012\110" +
    "\044\051\045\046\046\047\047\045\050\050\051\043\001" +
    "\002\000\004\005\111\001\002\000\006\030\112\032\113" +
    "\001\002\000\022\003\040\011\032\045\035\052\041\055" +
    "\034\056\037\057\036\062\033\001\002\000\004\010\120" +
    "\001\002\000\010\006\116\030\112\032\113\001\002\000" +
    "\010\006\uffd5\030\uffd5\032\uffd5\001\002\000\042\006\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\053\uffda\060\uffda" +
    "\061\uffda\062\uffda\001\002\000\010\006\uffd6\030\uffd6\032" +
    "\uffd6\001\002\000\034\017\102\020\076\021\101\022\062" +
    "\024\071\025\067\026\066\027\104\031\077\053\100\060" +
    "\012\061\010\062\075\001\002\000\042\006\uffd3\017\102" +
    "\020\076\021\101\022\062\024\071\025\067\026\066\027" +
    "\104\030\uffd3\031\077\032\uffd3\053\100\060\012\061\010" +
    "\062\075\001\002\000\042\006\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\053\uffe9\060\uffe9\061\uffe9\062\uffe9\001" +
    "\002\000\020\010\124\044\051\045\046\046\047\047\045" +
    "\050\050\051\043\001\002\000\034\017\102\020\076\021" +
    "\101\022\062\024\071\025\067\026\066\027\104\031\077" +
    "\053\100\060\012\061\010\062\075\001\002\000\034\017" +
    "\102\020\076\021\101\022\062\024\071\025\067\026\066" +
    "\027\104\031\126\053\100\060\012\061\010\062\075\001" +
    "\002\000\036\007\127\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1\053\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\001\002\000\010\006\uffd4\030\uffd4" +
    "\032\uffd4\001\002\000\022\003\040\011\032\045\035\052" +
    "\041\055\034\056\037\057\036\062\033\001\002\000\020" +
    "\012\132\044\051\045\046\046\047\047\045\050\050\051" +
    "\043\001\002\000\044\006\ufff2\007\133\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\053\ufff2\060\ufff2\061\ufff2\062\ufff2" +
    "\001\002\000\042\006\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\032\ufff3\053\ufff3\060\ufff3\061\ufff3\062\ufff3\001\002\000" +
    "\042\006\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\053" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\001\002\000\024\003\040" +
    "\011\032\012\142\045\035\052\041\055\034\056\037\057" +
    "\036\062\033\001\002\000\022\003\040\011\032\045\035" +
    "\052\041\055\034\056\037\057\036\062\033\001\002\000" +
    "\060\006\ufff2\007\133\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\044\051\045\046\046\047\047\045\050\050\051\043" +
    "\053\ufff2\060\ufff2\061\ufff2\062\ufff2\001\002\000\042\006" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\053\uffdf\060" +
    "\uffdf\061\uffdf\062\uffdf\001\002\000\022\012\uffc4\013\uffc4" +
    "\044\051\045\046\046\047\047\045\050\050\051\043\001" +
    "\002\000\004\007\150\001\002\000\006\012\145\013\144" +
    "\001\002\000\022\003\040\011\032\045\035\052\041\055" +
    "\034\056\037\057\036\062\033\001\002\000\004\007\146" +
    "\001\002\000\042\006\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\053\uffc7\060\uffc7\061\uffc7\062\uffc7\001\002\000" +
    "\022\012\uffc5\013\uffc5\044\051\045\046\046\047\047\045" +
    "\050\050\051\043\001\002\000\042\006\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\053\uffc6\060\uffc6\061\uffc6\062" +
    "\uffc6\001\002\000\004\016\152\001\002\000\022\003\040" +
    "\011\032\045\035\052\041\055\034\056\037\057\036\062" +
    "\033\001\002\000\060\006\ufff2\007\133\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\044\051\045\046\046\047\047\045" +
    "\050\050\051\043\053\ufff2\060\ufff2\061\ufff2\062\ufff2\001" +
    "\002\000\042\006\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\053\uffe0\060\uffe0\061\uffe0\062\uffe0\001\002\000\012" +
    "\017\102\020\076\021\101\062\157\001\002\000\004\062" +
    "\160\001\002\000\004\016\136\001\002\000\016\033\164" +
    "\034\167\035\163\036\162\037\166\040\161\001\002\000" +
    "\022\003\uffbc\011\uffbc\045\uffbc\052\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\062\uffbc\001\002\000\022\003\uffbe\011\uffbe\045" +
    "\uffbe\052\uffbe\055\uffbe\056\uffbe\057\uffbe\062\uffbe\001\002" +
    "\000\022\003\uffbf\011\uffbf\045\uffbf\052\uffbf\055\uffbf\056" +
    "\uffbf\057\uffbf\062\uffbf\001\002\000\022\003\uffc1\011\uffc1" +
    "\045\uffc1\052\uffc1\055\uffc1\056\uffc1\057\uffc1\062\uffc1\001" +
    "\002\000\022\003\040\011\032\045\035\052\041\055\034" +
    "\056\037\057\036\062\033\001\002\000\022\003\uffbd\011" +
    "\uffbd\045\uffbd\052\uffbd\055\uffbd\056\uffbd\057\uffbd\062\uffbd" +
    "\001\002\000\022\003\uffc0\011\uffc0\045\uffc0\052\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\062\uffc0\001\002\000\020\007\171" +
    "\044\051\045\046\046\047\047\045\050\050\051\043\001" +
    "\002\000\004\062\172\001\002\000\006\044\174\045\173" +
    "\001\002\000\004\045\203\001\002\000\004\044\202\001" +
    "\002\000\004\012\176\001\002\000\004\005\177\001\002" +
    "\000\034\017\102\020\076\021\101\022\062\024\071\025" +
    "\067\026\066\027\104\031\077\053\100\060\012\061\010" +
    "\062\075\001\002\000\036\006\201\017\102\020\076\021" +
    "\101\022\062\024\071\025\067\026\066\027\104\031\077" +
    "\053\100\060\012\061\010\062\075\001\002\000\042\006" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\053\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\001\002\000\004\012\uffc3\001\002" +
    "\000\004\012\uffc2\001\002\000\012\006\uffec\060\uffec\061" +
    "\uffec\062\uffec\001\002\000\024\003\040\011\032\043\207" +
    "\045\035\052\041\055\034\056\037\057\036\062\033\001" +
    "\002\000\032\033\164\034\167\035\163\036\162\037\166" +
    "\040\161\044\051\045\046\046\047\047\045\050\050\051" +
    "\043\001\002\000\024\003\040\011\032\043\207\045\035" +
    "\052\041\055\034\056\037\057\036\062\033\001\002\000" +
    "\012\007\uffcb\012\uffcb\041\uffcb\042\uffcb\001\002\000\010" +
    "\012\215\041\213\042\214\001\002\000\024\003\040\011" +
    "\032\043\207\045\035\052\041\055\034\056\037\057\036" +
    "\062\033\001\002\000\024\003\uffac\011\uffac\043\uffac\045" +
    "\uffac\052\uffac\055\uffac\056\uffac\057\uffac\062\uffac\001\002" +
    "\000\024\003\uffab\011\uffab\043\uffab\045\uffab\052\uffab\055" +
    "\uffab\056\uffab\057\uffab\062\uffab\001\002\000\004\005\216" +
    "\001\002\000\034\017\102\020\076\021\101\022\062\024" +
    "\071\025\067\026\066\027\104\031\077\053\100\060\012" +
    "\061\010\062\075\001\002\000\036\006\220\017\102\020" +
    "\076\021\101\022\062\024\071\025\067\026\066\027\104" +
    "\031\077\053\100\060\012\061\010\062\075\001\002\000" +
    "\042\006\uffce\017\uffce\020\uffce\021\uffce\022\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\053" +
    "\uffce\060\uffce\061\uffce\062\uffce\001\002\000\012\007\uffcc" +
    "\012\uffcc\041\uffcc\042\uffcc\001\002\000\012\007\uffc9\012" +
    "\uffc9\041\uffc9\042\uffc9\001\002\000\022\003\040\011\032" +
    "\045\035\052\041\055\034\056\037\057\036\062\033\001" +
    "\002\000\026\007\uffca\012\uffca\041\uffca\042\uffca\044\051" +
    "\045\046\046\047\047\045\050\050\051\043\001\002\000" +
    "\034\017\102\020\076\021\101\022\062\024\071\025\067" +
    "\026\066\027\104\031\077\053\100\060\012\061\010\062" +
    "\075\001\002\000\036\006\227\017\102\020\076\021\101" +
    "\022\062\024\071\025\067\026\066\027\104\031\077\053" +
    "\100\060\012\061\010\062\075\001\002\000\004\025\230" +
    "\001\002\000\024\003\040\011\032\043\207\045\035\052" +
    "\041\055\034\056\037\057\036\062\033\001\002\000\010" +
    "\007\232\041\213\042\214\001\002\000\042\006\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\053\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\001\002\000\024\003\040\011\032\043\207" +
    "\045\035\052\041\055\034\056\037\057\036\062\033\001" +
    "\002\000\010\012\235\041\213\042\214\001\002\000\004" +
    "\005\236\001\002\000\034\017\102\020\076\021\101\022" +
    "\062\024\071\025\067\026\066\027\104\031\077\053\100" +
    "\060\012\061\010\062\075\001\002\000\036\006\240\017" +
    "\102\020\076\021\101\022\062\024\071\025\067\026\066" +
    "\027\104\031\077\053\100\060\012\061\010\062\075\001" +
    "\002\000\044\006\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\243\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\053\uffd7\060\uffd7\061\uffd7\062\uffd7\001\002" +
    "\000\044\006\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\053\uffd1\060\uffd1\061\uffd1\062\uffd1\001\002\000" +
    "\042\006\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\053" +
    "\uffdb\060\uffdb\061\uffdb\062\uffdb\001\002\000\006\005\256" +
    "\022\247\001\002\000\044\006\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\246\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\053\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\001\002\000\044\006\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\053\uffd2\060\uffd2\061\uffd2\062\uffd2" +
    "\001\002\000\004\022\247\001\002\000\004\011\250\001" +
    "\002\000\024\003\040\011\032\043\207\045\035\052\041" +
    "\055\034\056\037\057\036\062\033\001\002\000\010\012" +
    "\252\041\213\042\214\001\002\000\004\005\253\001\002" +
    "\000\034\017\102\020\076\021\101\022\062\024\071\025" +
    "\067\026\066\027\104\031\077\053\100\060\012\061\010" +
    "\062\075\001\002\000\036\006\255\017\102\020\076\021" +
    "\101\022\062\024\071\025\067\026\066\027\104\031\077" +
    "\053\100\060\012\061\010\062\075\001\002\000\044\006" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\053" +
    "\uffd0\060\uffd0\061\uffd0\062\uffd0\001\002\000\034\017\102" +
    "\020\076\021\101\022\062\024\071\025\067\026\066\027" +
    "\104\031\077\053\100\060\012\061\010\062\075\001\002" +
    "\000\036\006\260\017\102\020\076\021\101\022\062\024" +
    "\071\025\067\026\066\027\104\031\077\053\100\060\012" +
    "\061\010\062\075\001\002\000\042\006\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\053\uffd9\060\uffd9\061\uffd9\062" +
    "\uffd9\001\002\000\004\062\266\001\002\000\004\005\263" +
    "\001\002\000\034\017\102\020\076\021\101\022\062\024" +
    "\071\025\067\026\066\027\104\031\077\053\100\060\012" +
    "\061\010\062\075\001\002\000\036\006\265\017\102\020" +
    "\076\021\101\022\062\024\071\025\067\026\066\027\104" +
    "\031\077\053\100\060\012\061\010\062\075\001\002\000" +
    "\012\006\uffed\060\uffed\061\uffed\062\uffed\001\002\000\006" +
    "\012\uffeb\013\uffeb\001\002\000\012\006\ufff9\060\ufff9\061" +
    "\ufff9\062\ufff9\001\002\000\012\006\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\001\002\000\012\002\ufffb\004\ufffb\060\ufffb\061" +
    "\ufffb\001\002\000\012\006\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\012\002\006\003\004\004\010\020\005\001" +
    "\001\000\002\001\001\000\006\004\015\020\014\001\001" +
    "\000\006\003\013\004\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\015\020\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\024" +
    "\006\021\013\020\020\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\267\013\266\020\271\001\001\000\002\001\001\000" +
    "\004\007\055\001\001\000\004\015\030\001\001\000\004" +
    "\024\043\001\001\000\004\015\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\043\001\001\000\002\001\001\000\004" +
    "\015\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\043\001\001\000\004\024\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\067\011\063\012\062\014" +
    "\071\016\073\017\104\020\102\033\064\037\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\011\121\012\062\014\071\016\073\017\104\020\102\033" +
    "\064\037\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\106\001\001\000\004" +
    "\024\043\001\001\000\002\001\001\000\006\031\113\032" +
    "\114\001\001\000\004\015\122\001\001\000\002\001\001" +
    "\000\004\032\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\120\011\063\012\062" +
    "\014\071\016\073\017\104\020\102\033\064\037\072\001" +
    "\001\000\022\011\121\012\062\014\071\016\073\017\104" +
    "\020\102\033\064\037\072\001\001\000\002\001\001\000" +
    "\004\024\043\001\001\000\024\010\124\011\063\012\062" +
    "\014\071\016\073\017\104\020\102\033\064\037\072\001" +
    "\001\000\022\011\121\012\062\014\071\016\073\017\104" +
    "\020\102\033\064\037\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\130\001\001\000\004\024\043" +
    "\001\001\000\004\034\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\140\036\142\001\001\000\004" +
    "\015\136\001\001\000\006\024\043\034\137\001\001\000" +
    "\002\001\001\000\004\024\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\152\001\001\000" +
    "\006\024\043\034\153\001\001\000\002\001\001\000\006" +
    "\014\155\037\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\043\001\001\000\002\001\001\000\004\022\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\177\011\063\012\062\014" +
    "\071\016\073\017\104\020\102\033\064\037\072\001\001" +
    "\000\022\011\121\012\062\014\071\016\073\017\104\020" +
    "\102\033\064\037\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\205\025\207\026\210\001\001\000\006\021\222\024\043" +
    "\001\001\000\006\015\205\025\221\001\001\000\002\001" +
    "\001\000\004\023\211\001\001\000\006\015\205\025\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\216\011\063\012\062\014\071\016\073" +
    "\017\104\020\102\033\064\037\072\001\001\000\022\011" +
    "\121\012\062\014\071\016\073\017\104\020\102\033\064" +
    "\037\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\223\001\001\000\004\024\043" +
    "\001\001\000\024\010\225\011\063\012\062\014\071\016" +
    "\073\017\104\020\102\033\064\037\072\001\001\000\022" +
    "\011\121\012\062\014\071\016\073\017\104\020\102\033" +
    "\064\037\072\001\001\000\002\001\001\000\010\015\205" +
    "\025\207\026\230\001\001\000\004\023\211\001\001\000" +
    "\002\001\001\000\010\015\205\025\207\026\233\001\001" +
    "\000\004\023\211\001\001\000\002\001\001\000\024\010" +
    "\236\011\063\012\062\014\071\016\073\017\104\020\102" +
    "\033\064\037\072\001\001\000\022\011\121\012\062\014" +
    "\071\016\073\017\104\020\102\033\064\037\072\001\001" +
    "\000\010\027\243\030\240\035\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\205\025\207\026\250\001\001\000\004" +
    "\023\211\001\001\000\002\001\001\000\024\010\253\011" +
    "\063\012\062\014\071\016\073\017\104\020\102\033\064" +
    "\037\072\001\001\000\022\011\121\012\062\014\071\016" +
    "\073\017\104\020\102\033\064\037\072\001\001\000\002" +
    "\001\001\000\024\010\256\011\063\012\062\014\071\016" +
    "\073\017\104\020\102\033\064\037\072\001\001\000\022" +
    "\011\121\012\062\014\071\016\073\017\104\020\102\033" +
    "\064\037\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\263\011\063\012\062\014" +
    "\071\016\073\017\104\020\102\033\064\037\072\001\001" +
    "\000\022\011\121\012\062\014\071\016\073\017\104\020" +
    "\102\033\064\037\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticojs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticojs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticojs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    public listaSimple list = new listaSimple();
    public String salida = "";
    public int linecounter = 0;
    public int cont_params = 0;
    public int lines = 0;
    public String getsalida(){
        return salida;
    }

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintacticojs$actions {
  private final sintacticojs parser;

  /** Constructor */
  CUP$sintacticojs$actions(sintacticojs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintacticojs$do_action_part00000000(
    int                        CUP$sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$sintacticojs$parser,
    java.util.Stack            CUP$sintacticojs$stack,
    int                        CUP$sintacticojs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticojs$result;

      /* select the action based on the action number */
      switch (CUP$sintacticojs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)).value;
		RESULT = start_val;
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticojs$parser.done_parsing();
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CLASES 
            {
              String RESULT =null;
		 list.imprimirLista(); 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= COMENTARIO CLASES 
            {
              String RESULT =null;
		 list.imprimirLista(); 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASES ::= CLASES CLASE 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CLASES",1, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASES ::= CLASES COMENTARIO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CLASES",1, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASES ::= CLASE 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CLASES",1, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CLASE ::= classes id obracket CONTENIDO cbracket 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)).value;
		 list.insertarNodo("clase",var1,lines,0);
                                                    lines = 0; 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CLASE",2, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDO ::= CONTENIDO METODO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO ::= CONTENIDO VARIABLEUNICA 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= CONTENIDO COMENTARIO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDO ::= METODO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO ::= VARIABLEUNICA 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO ::= COMENTARIO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO ::= error 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PUNTOCOMA ::= semicolon 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("PUNTOCOMA",26, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PUNTOCOMA ::= 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("PUNTOCOMA",26, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMENTARIO ::= multcomment 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$sintacticojs$stack.peek()).value;
		 list.insertarNodo("comentario",var1,1,0); 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("COMENTARIO",14, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMENTARIO ::= comment 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$sintacticojs$stack.peek()).value;
		 list.insertarNodo("comentario",var1,1,0); 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("COMENTARIO",14, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIABLEUNICA ::= id equal VALOR semicolon 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIABLEUNICA",9, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIABLEUNICA ::= id equal VALOR 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIABLEUNICA",9, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // METODO ::= id oparent PARAMETROS cparent obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-6)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-6)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-6)).value;
		 list.insertarNodo("metodo",var1,linecounter,cont_params);
                                                                        cont_params = 0; lines += linecounter + 1; linecounter = 0; 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("METODO",4, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // METODO ::= id oparent cparent obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-5)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-5)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-5)).value;
		 list.insertarNodo("metodo",var1,linecounter,0); 
                                                                     lines+= linecounter +1; linecounter = 0; 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("METODO",4, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS ::= PARAMETROS comma id 
            {
              String RESULT =null;
		 cont_params++; 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",5, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS ::= id 
            {
              String RESULT =null;
		 cont_params++; 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",5, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              String RESULT =null;
		 linecounter++; 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCIONES ::= INSTRUCCION 
            {
              String RESULT =null;
		 linecounter++; 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= CONDICION 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= CICLO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= VARIABLE 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= LLAMADA 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= CONSOLELOG 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= COMENTARIO 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= tkbreak 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VARIABLE ::= TIPOVARIABLE id equal VALOR PUNTOCOMA 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)).value;
		 list.insertarNodo("variable",var1,1,0); 
              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIABLE",10, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VARIABLE ::= id equal VALOR PUNTOCOMA 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIABLE",10, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPOVARIABLE ::= var 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLE",29, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPOVARIABLE ::= let 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLE",29, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPOVARIABLE ::= tkconst 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLE",29, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDICION ::= tkif oparent CONDICIONALES cparent obracket INSTRUCCIONES cbracket TIPOIF 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDICION ::= tkswitch oparent VALOR cparent obracket CASES cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPOIF ::= tkelse obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("TIPOIF",27, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOIF ::= ELSEIFS 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("TIPOIF",27, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOIF ::= 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("TIPOIF",27, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CASES",23, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CASES",23, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASE ::= tkcase VALOR colon INSTRUCCIONES tkbreak semicolon 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CASE",24, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASE ::= tkdefault colon INSTRUCCIONES 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CASE",24, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSEIFS ::= ELSEIFS ELSEIF 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("ELSEIFS",21, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSEIFS ::= ELSEIF 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("ELSEIFS",21, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSEIF ::= tkelse tkif oparent CONDICIONALES cparent obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("ELSEIF",22, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CICLO ::= tkfor oparent VARIABLE id OPERADORRELACIONAL VALOR semicolon id OPERADORDOBLE cparent obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CICLO",12, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-12)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CICLO ::= tkwhile oparent CONDICIONALES cparent obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CICLO",12, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CICLO ::= tkdo obracket INSTRUCCIONES cbracket tkwhile CONDICIONALES semicolon 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CICLO",12, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICIONALES ::= CONDICIONALES OPERADORLOGICO CONDICIONAL 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICIONALES ::= CONDICIONAL 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICIONAL ::= VALOR OPERADORRELACIONAL VALOR 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",19, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICIONAL ::= not CONDICIONAL 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",19, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONSOLELOG ::= console oparent VALOR cparent PUNTOCOMA 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("CONSOLELOG",25, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LLAMADA ::= id oparent PASARPARAMS cparent semicolon 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("LLAMADA",8, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LLAMADA ::= id oparent cparent semicolon 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("LLAMADA",8, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PASARPARAMS ::= PASARPARAMS comma VALOR 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("PASARPARAMS",28, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PASARPARAMS ::= VALOR 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("PASARPARAMS",28, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERADORDOBLE ::= plus plus 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORDOBLE",16, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERADORDOBLE ::= minus minus 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORDOBLE",16, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERADORRELACIONAL ::= equalsto 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",15, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADORRELACIONAL ::= different 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",15, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADORRELACIONAL ::= lessthan 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",15, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERADORRELACIONAL ::= greaterthan 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",15, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADORRELACIONAL ::= loeto 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",15, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADORRELACIONAL ::= goeto 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORRELACIONAL",15, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALOR ::= VALOR OPERADORARITMETICO VALOR 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALOR ::= minus VALOR 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALOR ::= oparent VALOR cparent 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.elementAt(CUP$sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALOR ::= integerr 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALOR ::= doublee 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALOR ::= id 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALOR ::= charr 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALOR ::= stringg 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALOR ::= error 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADORARITMETICO ::= plus 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORARITMETICO",18, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERADORARITMETICO ::= minus 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORARITMETICO",18, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERADORARITMETICO ::= modulus 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORARITMETICO",18, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERADORARITMETICO ::= pot 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORARITMETICO",18, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADORARITMETICO ::= mult 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORARITMETICO",18, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADORARITMETICO ::= slash 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORARITMETICO",18, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADORLOGICO ::= and 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORLOGICO",17, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADORLOGICO ::= or 
            {
              String RESULT =null;

              CUP$sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERADORLOGICO",17, ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticojs$stack.peek()), RESULT);
            }
          return CUP$sintacticojs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintacticojs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintacticojs$do_action(
    int                        CUP$sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$sintacticojs$parser,
    java.util.Stack            CUP$sintacticojs$stack,
    int                        CUP$sintacticojs$top)
    throws java.lang.Exception
    {
              return CUP$sintacticojs$do_action_part00000000(
                               CUP$sintacticojs$act_num,
                               CUP$sintacticojs$parser,
                               CUP$sintacticojs$stack,
                               CUP$sintacticojs$top);
    }
}

}
