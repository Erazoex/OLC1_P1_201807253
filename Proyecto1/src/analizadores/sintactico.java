
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import proyecto1.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\004\000\002\024\004\000\002\024\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\006\000\002\014\006\000\002\015" +
    "\006\000\002\017\032\000\002\017\022\000\002\017\012" +
    "\000\002\017\004\000\002\017\003\000\002\020\005\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\016\011\000\002\022" +
    "\003\000\002\022\003\000\002\006\006\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\005\007\000\002\007\003\000\002\007\003\000\002" +
    "\023\014\000\002\023\006\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\010\006\006\011\011\012\010\001\002\000" +
    "\010\006\006\011\011\012\010\001\002\000\004\002\000" +
    "\001\002\000\004\007\013\001\002\000\004\002\012\001" +
    "\002\000\030\004\uffe5\006\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\025\uffe5\027\uffe5\030\uffe5\032\uffe5\045\uffe5\046\uffe5\001" +
    "\002\000\030\004\uffe4\006\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\025\uffe4\027\uffe4\030\uffe4\032\uffe4\045\uffe4\046\uffe4\001" +
    "\002\000\004\002\001\001\002\000\020\004\027\011\011" +
    "\012\010\025\016\032\020\045\017\046\026\001\002\000" +
    "\022\004\ufffb\010\ufffb\011\ufffb\012\ufffb\025\ufffb\032\ufffb" +
    "\045\ufffb\046\ufffb\001\002\000\022\004\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\025\ufffc\032\ufffc\045\ufffc\046\ufffc\001\002" +
    "\000\004\017\150\001\002\000\004\007\145\001\002\000" +
    "\004\007\142\001\002\000\022\004\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\025\ufff7\032\ufff7\045\ufff7\046\ufff7\001\002\000" +
    "\022\004\ufffa\010\ufffa\011\ufffa\012\ufffa\025\ufffa\032\ufffa" +
    "\045\ufffa\046\ufffa\001\002\000\022\004\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\025\ufff8\032\ufff8\045\ufff8\046\ufff8\001\002" +
    "\000\022\004\ufff6\010\ufff6\011\ufff6\012\ufff6\025\ufff6\032" +
    "\ufff6\045\ufff6\046\ufff6\001\002\000\022\004\027\010\141" +
    "\011\011\012\010\025\016\032\020\045\017\046\026\001" +
    "\002\000\004\007\070\001\002\000\004\007\032\001\002" +
    "\000\022\004\ufff9\010\ufff9\011\ufff9\012\ufff9\025\ufff9\032" +
    "\ufff9\045\ufff9\046\ufff9\001\002\000\022\004\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\025\ufff5\032\ufff5\045\ufff5\046\ufff5\001" +
    "\002\000\010\003\033\027\034\030\035\001\002\000\014" +
    "\010\uffdf\011\uffdf\012\uffdf\027\uffdf\030\uffdf\001\002\000" +
    "\004\005\uffdd\001\002\000\004\005\uffdc\001\002\000\014" +
    "\010\065\011\011\012\010\027\034\030\035\001\002\000" +
    "\004\005\041\001\002\000\014\010\uffe1\011\uffe1\012\uffe1" +
    "\027\uffe1\030\uffe1\001\002\000\004\024\042\001\002\000" +
    "\012\021\050\022\047\023\043\040\044\001\002\000\004" +
    "\015\uffd9\001\002\000\004\007\052\001\002\000\004\015" +
    "\uffd8\001\002\000\004\015\051\001\002\000\004\015\uffd7" +
    "\001\002\000\004\015\uffd6\001\002\000\014\010\uffde\011" +
    "\uffde\012\uffde\027\uffde\030\uffde\001\002\000\006\041\053" +
    "\042\054\001\002\000\004\026\056\001\002\000\004\010" +
    "\055\001\002\000\004\015\uffda\001\002\000\004\023\057" +
    "\001\002\000\004\026\060\001\002\000\004\023\061\001" +
    "\002\000\004\026\062\001\002\000\004\023\063\001\002" +
    "\000\004\010\064\001\002\000\004\015\uffdb\001\002\000" +
    "\022\004\uffe3\010\uffe3\011\uffe3\012\uffe3\025\uffe3\032\uffe3" +
    "\045\uffe3\046\uffe3\001\002\000\014\010\uffe0\011\uffe0\012" +
    "\uffe0\027\uffe0\030\uffe0\001\002\000\014\010\uffe2\011\uffe2" +
    "\012\uffe2\027\uffe2\030\uffe2\001\002\000\006\003\072\035" +
    "\071\001\002\000\004\016\076\001\002\000\010\010\uffed" +
    "\011\uffed\012\uffed\001\002\000\010\010\074\011\011\012" +
    "\010\001\002\000\022\004\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\025\ufff2\032\ufff2\045\ufff2\046\ufff2\001\002\000\010\010" +
    "\uffee\011\uffee\012\uffee\001\002\000\012\003\101\005\103" +
    "\022\102\023\077\001\002\000\010\015\uffea\026\uffea\034" +
    "\uffea\001\002\000\004\015\104\001\002\000\010\015\uffe7" +
    "\026\uffe7\034\uffe7\001\002\000\010\015\uffe8\026\uffe8\034" +
    "\uffe8\001\002\000\010\015\uffe9\026\uffe9\034\uffe9\001\002" +
    "\000\006\036\105\047\106\001\002\000\004\016\112\001" +
    "\002\000\004\016\107\001\002\000\012\003\101\005\103" +
    "\022\102\023\077\001\002\000\004\015\111\001\002\000" +
    "\010\010\uffef\011\uffef\012\uffef\001\002\000\004\033\113" +
    "\001\002\000\012\003\101\005\103\022\102\023\077\001" +
    "\002\000\006\026\uffeb\034\uffeb\001\002\000\006\026\116" +
    "\034\117\001\002\000\012\003\101\005\103\022\102\023" +
    "\077\001\002\000\004\015\120\001\002\000\004\037\121" +
    "\001\002\000\004\016\122\001\002\000\004\033\123\001" +
    "\002\000\012\003\101\005\103\022\102\023\077\001\002" +
    "\000\006\026\116\034\125\001\002\000\004\015\126\001" +
    "\002\000\012\010\ufff0\011\ufff0\012\ufff0\043\127\001\002" +
    "\000\004\016\130\001\002\000\012\003\101\005\103\022" +
    "\102\023\077\001\002\000\004\015\132\001\002\000\004" +
    "\044\133\001\002\000\004\016\134\001\002\000\012\003" +
    "\101\005\103\022\102\023\077\001\002\000\004\015\136" +
    "\001\002\000\010\010\ufff1\011\ufff1\012\ufff1\001\002\000" +
    "\006\026\uffec\034\uffec\001\002\000\022\004\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\025\ufffd\032\ufffd\045\ufffd\046\ufffd\001" +
    "\002\000\004\002\uffff\001\002\000\006\003\072\035\071" +
    "\001\002\000\010\010\144\011\011\012\010\001\002\000" +
    "\022\004\ufff4\010\ufff4\011\ufff4\012\ufff4\025\ufff4\032\ufff4" +
    "\045\ufff4\046\ufff4\001\002\000\006\003\072\035\071\001" +
    "\002\000\010\010\147\011\011\012\010\001\002\000\022" +
    "\004\ufff3\010\ufff3\011\ufff3\012\ufff3\025\ufff3\032\ufff3\045" +
    "\ufff3\046\ufff3\001\002\000\004\023\151\001\002\000\004" +
    "\026\152\001\002\000\004\023\153\001\002\000\004\020" +
    "\154\001\002\000\004\015\155\001\002\000\022\004\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\025\uffe6\032\uffe6\045\uffe6\046" +
    "\uffe6\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\010\002\006\003\004\022\003\001\001\000" +
    "\006\003\155\022\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\013\012\021\013\020" +
    "\014\023\015\030\016\022\022\027\024\024\025\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\013\012\021\013\020\014\023\015\030\016\022\022" +
    "\027\025\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\035\005" +
    "\037\007\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\066\007\036\022\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\045\023\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\114\021\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\123\021\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\142" +
    "\001\001\000\004\022\074\001\001\000\002\001\001\000" +
    "\004\017\145\001\001\000\004\022\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public manejoArchivos handler = new manejoArchivos();

    public String salida = "";

    public String getsalida(){
        return salida;
    }

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= REPORTEESTADISTICO 
            {
              String RESULT =null;
		 System.out.println("produccion pendiente"); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // REPORTEESTADISTICO ::= genreport obracket INSTRUCCIONES cbracket 
            {
              String RESULT =null;
		 System.out.println("produccion reporte"); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REPORTEESTADISTICO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // REPORTEESTADISTICO ::= COMENTARIO REPORTEESTADISTICO 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REPORTEESTADISTICO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= INSTRUCCION 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= VARGLOBAL 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= GRAFICA 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= COMENTARIO 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= COMPARE 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GRAFICA ::= GRAFICABARRAS 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICA",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GRAFICA ::= GRAFICAPIE 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICA",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GRAFICA ::= GRAFICALINEAS 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICA",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GRAFICABARRAS ::= graficabarras obracket EXPRESION cbracket 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICABARRAS",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GRAFICAPIE ::= graficapie obracket EXPRESION cbracket 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAPIE",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GRAFICALINEAS ::= graficalineas obracket EXPRESION cbracket 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICALINEAS",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION ::= titulo colon VALORESPERADO semicolon ejex colon osbracket ARRAY csbracket semicolon valores colon osbracket ARRAY csbracket semicolon titulox colon VALORESPERADO semicolon tituloy colon VALORESPERADO semicolon 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-23)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= titulo colon VALORESPERADO semicolon ejex colon osbracket ARRAY csbracket semicolon valores colon osbracket ARRAY csbracket semicolon 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= titulo colon VALORESPERADO semicolon archivo colon VALORESPERADO semicolon 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= EXPRESION COMENTARIO 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= error 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARRAY ::= ARRAY comma VALORESPERADO 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARRAY",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARRAY ::= VALORESPERADO 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARRAY",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VALORESPERADO ::= stringg 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALORESPERADO",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALORESPERADO ::= id 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALORESPERADO",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALORESPERADO ::= doublee 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALORESPERADO",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALORESPERADO ::= error 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALORESPERADO",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COMPARE ::= compare oparent stringg comma stringg cparent semicolon 
            {
              String RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 handler.setArchivos(var1,var2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMPARE",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COMENTARIO ::= multcomment 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMENTARIO ::= comment 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARGLOBAL ::= definirglobales obracket VARIABLES cbracket 
            {
              String RESULT =null;
		 System.out.println("produccion definir globales"); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARGLOBAL",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VARIABLES ::= VARIABLES VARIABLE 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VARIABLES ::= VARIABLE 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VARIABLES ::= VARIABLES COMENTARIO 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VARIABLES ::= error 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARIABLE ::= TIPO id equal VALOR semicolon 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= idstring 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= iddouble 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PUNTAJES ::= dollar obracket puntajeespecifico comma stringg comma stringg comma stringg cbracket 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PUNTAJES",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PUNTAJES ::= dollar obracket puntajegeneral cbracket 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PUNTAJES",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALOR ::= stringg 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOR ::= PUNTAJES 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALOR ::= doublee 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALOR ::= integerr 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
